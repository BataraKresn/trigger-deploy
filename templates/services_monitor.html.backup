<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>üîç Services Monitor - Trigger Deploy</title>
  <link rel="icon" type="image/svg+xml" href="/static/images/favicon.svg">
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  
  <script>
    tailwind.config = {
      theme: {
        extend: {
          animation: {
            'pulse': 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
            'spin': 'spin 1s linear infinite',
          }
        }
      }
    }
  </script>
</head>
<body class="bg-gray-50 min-h-screen">
  <!-- Navigation -->
  <nav class="bg-white border-b border-gray-200 sticky top-0 z-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between h-16">
        <!-- Logo and Navigation -->
        <div class="flex items-center">
          <div class="flex-shrink-0 flex items-center">
            <div class="w-8 h-8 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-lg flex items-center justify-center text-white mr-3">
              <i class="fas fa-rocket"></i>
            </div>
            <span class="text-xl font-bold text-gray-900">Trigger Deploy</span>
          </div>
          
          <!-- Navigation Links -->
          <div class="hidden md:ml-8 md:flex md:space-x-8">
            <a href="/dashboard" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 border-b-2 px-1 pt-1 text-sm font-medium transition duration-200">
              <i class="fas fa-home mr-1"></i>Dashboard
            </a>
            <a href="/deploy-servers" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 border-b-2 px-1 pt-1 text-sm font-medium transition duration-200">
              <i class="fas fa-cloud-upload-alt mr-1"></i>Deploy
            </a>
            <a href="/services-monitor" class="border-blue-500 text-blue-600 border-b-2 px-1 pt-1 text-sm font-medium">
              <i class="fas fa-chart-line mr-1"></i>Monitor
            </a>
            <a href="/metrics" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 border-b-2 px-1 pt-1 text-sm font-medium transition duration-200">
              <i class="fas fa-analytics mr-1"></i>Metrics
            </a>
            <a href="/users" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 border-b-2 px-1 pt-1 text-sm font-medium transition duration-200">
              <i class="fas fa-users mr-1"></i>Users
            </a>
          </div>
        </div>
        
        <!-- Right side -->
        <div class="flex items-center space-x-4">
          <button id="refreshBtn" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition duration-200">
            <i class="fas fa-sync-alt mr-1"></i>Refresh
          </button>
          
          <!-- User Menu -->
          <div class="relative">
            <button id="userMenuButton" class="flex items-center space-x-2 text-gray-700 hover:text-gray-900 p-2 rounded-lg hover:bg-gray-100 transition duration-200">
              <i class="fas fa-user-circle text-lg"></i>
              <i class="fas fa-chevron-down text-xs"></i>
            </button>
            
            <!-- Dropdown Menu -->
            <div id="userMenu" class="hidden absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-1">
              <a href="/users" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                <i class="fas fa-user mr-2"></i>Profile
              </a>
              <hr class="my-1">
              <button id="logoutBtn" class="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50">
                <i class="fas fa-sign-out-alt mr-2"></i>Logout
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <div class="max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
    <!-- Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900 flex items-center">
        <i class="fas fa-chart-line mr-3 text-blue-500"></i>
        Services Monitor
      </h1>
      <p class="text-gray-600 mt-2">Real-time monitoring of all your services and infrastructure</p>
    </div>

    <!-- Controls -->
    <div class="mb-8 bg-white rounded-xl p-4 border border-gray-200">
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div class="flex items-center mb-3 sm:mb-0">
          <input type="checkbox" id="autoRefreshToggle" checked class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded mr-2">
          <label for="autoRefreshToggle" class="text-sm font-medium text-gray-700">
            <i class="fas fa-sync-alt mr-1"></i>Auto Refresh (30s)
          </label>
        </div>
        <div class="text-sm text-gray-500">
          <i class="fas fa-clock mr-1"></i>
          Last updated: <span id="lastUpdated">--:--:--</span>
        </div>
      </div>
    </div>

    <!-- Summary Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
      <!-- Total Services -->
      <div class="bg-white rounded-xl p-6 border-l-4 border-blue-500 shadow-sm hover:shadow-md transition duration-200">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-gray-600">Total Services</p>
            <p class="text-3xl font-bold text-gray-900" id="totalServices">0</p>
          </div>
          <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
            <i class="fas fa-server text-blue-600 text-xl"></i>
          </div>
        </div>
      </div>

      <!-- Healthy Services -->
      <div class="bg-white rounded-xl p-6 border-l-4 border-green-500 shadow-sm hover:shadow-md transition duration-200">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-gray-600">Healthy Services</p>
            <p class="text-3xl font-bold text-gray-900" id="healthyServices">0</p>
          </div>
          <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
            <i class="fas fa-check-circle text-green-600 text-xl"></i>
          </div>
        </div>
      </div>

      <!-- Issues -->
      <div class="bg-white rounded-xl p-6 border-l-4 border-yellow-500 shadow-sm hover:shadow-md transition duration-200">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-gray-600">Issues</p>
            <p class="text-3xl font-bold text-gray-900" id="issueServices">0</p>
          </div>
          <div class="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center">
            <i class="fas fa-exclamation-triangle text-yellow-600 text-xl"></i>
          </div>
        </div>
      </div>

      <!-- Critical Down -->
      <div class="bg-white rounded-xl p-6 border-l-4 border-red-500 shadow-sm hover:shadow-md transition duration-200">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-gray-600">Critical Down</p>
            <p class="text-3xl font-bold text-gray-900" id="criticalServices">0</p>
          </div>
          <div class="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
            <i class="fas fa-times-circle text-red-600 text-xl"></i>
          </div>
        </div>
      </div>
    </div>

    <!-- Services Grid -->
    <div class="mb-8">
      <h2 class="text-xl font-semibold text-gray-900 mb-4">
        <i class="fas fa-list-ul mr-2"></i>Service Status
      </h2>
      <div id="servicesContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <!-- Loading State -->
        <div class="col-span-full flex justify-center items-center py-12">
          <div class="text-center">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
            <p class="text-gray-600">Loading services...</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Recent Events -->
    <div class="bg-white rounded-xl shadow-sm overflow-hidden">
      <div class="px-6 py-4 border-b border-gray-200">
        <h3 class="text-lg font-semibold text-gray-900">
          <i class="fas fa-history mr-2 text-blue-500"></i>
          Recent Events
        </h3>
      </div>
      <div class="p-6">
        <div id="recentEvents" class="space-y-4">
          <!-- Recent events will be loaded here -->
          <div class="flex items-center text-gray-500">
            <i class="fas fa-info-circle mr-2"></i>
            <span class="text-sm">No recent events to display</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Footer -->
  <footer class="bg-white border-t border-gray-200 mt-12">
    <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
      <div class="flex flex-col sm:flex-row justify-between items-center">
        <div class="flex items-center mb-4 sm:mb-0">
          <div class="w-6 h-6 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-lg flex items-center justify-center text-white mr-2">
            <i class="fas fa-rocket text-xs"></i>
          </div>
          <div>
            <h3 class="text-sm font-semibold text-gray-900">Trigger Deploy Server</h3>
            <p class="text-xs text-gray-600">Service monitoring and health checks</p>
          </div>
        </div>
        <div class="text-sm text-gray-500">
          <i class="fas fa-clock mr-1"></i>
          Server Time: <span id="serverTime">--:--:--</span>
        </div>
      </div>
    </div>
  </footer>

  <script>
    // Service Monitor class
    class ServiceMonitor {
      constructor() {
        this.services = [];
        this.autoRefresh = true;
        this.refreshInterval = null;
        this.init();
      }

      async init() {
        await this.loadServices();
        this.setupEventListeners();
        this.startAutoRefresh();
        this.updateTimestamps();
        setInterval(() => this.updateTimestamps(), 1000);
      }

      async loadServices() {
        try {
          const response = await fetch('/api/services/status');
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          const data = await response.json();
          this.services = [
            ...(data.local_services || []),
            ...(data.remote_services || [])
          ];
          
          this.renderServices();
          this.updateSummary();
          this.updateLastRefreshed();
        } catch (error) {
          console.error('Failed to load services:', error);
          this.showError('Failed to load service status. Please check your connection.');
        }
      }

      renderServices() {
        const container = document.getElementById('servicesContainer');
        
        if (!this.services || this.services.length === 0) {
          container.innerHTML = `
            <div class="col-span-full text-center py-12">
              <i class="fas fa-server text-4xl text-gray-300 mb-4"></i>
              <p class="text-gray-600 text-lg font-medium">No services configured</p>
              <p class="text-gray-500 text-sm">Add services to your configuration to start monitoring</p>
            </div>
          `;
          return;
        }

        const servicesHTML = this.services.map(service => this.renderServiceCard(service)).join('');
        container.innerHTML = servicesHTML;
      }

      renderServiceCard(service) {
        const status = this.getServiceStatus(service);
        const { color, bgColor, icon } = this.getStatusStyles(status);
        const isCritical = service.critical && status !== 'healthy';
        
        return `
          <div class="bg-white rounded-xl p-6 shadow-sm hover:shadow-md transition duration-200 ${isCritical ? 'border-2 border-red-200 bg-red-50' : 'border border-gray-200'}">
            <div class="flex items-start justify-between mb-4">
              <div class="flex items-center">
                <div class="w-10 h-10 ${bgColor} rounded-lg flex items-center justify-center text-white mr-3">
                  <i class="fas ${this.getServiceIcon(service)} ${isCritical ? 'animate-pulse' : ''}"></i>
                </div>
                <div>
                  <h3 class="font-semibold text-gray-900">${service.name || 'Unknown Service'}</h3>
                  <p class="text-sm text-gray-500">${service.description || 'No description'}</p>
                </div>
              </div>
              <span class="px-2 py-1 text-xs font-semibold rounded-full ${color}">
                <i class="fas ${icon} mr-1"></i>${status.toUpperCase()}
              </span>
            </div>
            
            <div class="space-y-2 text-sm">
              ${service.url ? `
                <div class="flex justify-between">
                  <span class="text-gray-600">URL:</span>
                  <span class="font-mono text-xs text-gray-900 truncate max-w-32">${service.url}</span>
                </div>
              ` : ''}
              
              ${service.port ? `
                <div class="flex justify-between">
                  <span class="text-gray-600">Port:</span>
                  <span class="text-gray-900">${service.port}</span>
                </div>
              ` : ''}
              
              ${service.response_time ? `
                <div class="flex justify-between">
                  <span class="text-gray-600">Response Time:</span>
                  <span class="text-gray-900">${service.response_time}ms</span>
                </div>
              ` : ''}
              
              <div class="flex justify-between">
                <span class="text-gray-600">Last Check:</span>
                <span class="text-gray-900">${this.formatTimestamp(service.timestamp)}</span>
              </div>
              
              ${service.critical ? `
                <div class="flex justify-between">
                  <span class="text-red-600">Priority:</span>
                  <span class="px-2 py-1 bg-red-100 text-red-700 rounded-full text-xs font-medium">Critical</span>
                </div>
              ` : ''}
            </div>
            
            ${service.message && status !== 'healthy' ? `
              <div class="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                <p class="text-sm text-yellow-800">
                  <i class="fas fa-exclamation-triangle mr-1"></i>
                  ${service.message}
                </p>
              </div>
            ` : ''}
            
            <div class="mt-4 pt-4 border-t border-gray-100">
              <button onclick="serviceMonitor.checkService('${service.name}')" class="w-full bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition duration-200">
                <i class="fas fa-sync-alt mr-1"></i>Check Now
              </button>
            </div>
          </div>
        `;
      }

      getServiceStatus(service) {
        if (service.status) {
          const status = service.status.toLowerCase();
          if (['running', 'up', 'healthy', 'online'].includes(status)) return 'healthy';
          if (['down', 'stopped', 'error', 'failed'].includes(status)) return 'unhealthy';
        }
        
        if (service.response_time !== undefined && service.response_time > 0) return 'healthy';
        return 'unknown';
      }

      getStatusStyles(status) {
        switch (status) {
          case 'healthy':
            return {
              color: 'bg-green-100 text-green-700',
              bgColor: 'bg-green-500',
              icon: 'fa-check-circle'
            };
          case 'unhealthy':
            return {
              color: 'bg-red-100 text-red-700',
              bgColor: 'bg-red-500',
              icon: 'fa-times-circle'
            };
          default:
            return {
              color: 'bg-gray-100 text-gray-700',
              bgColor: 'bg-gray-500',
              icon: 'fa-question-circle'
            };
        }
      }

      getServiceIcon(service) {
        if (service.icon) return service.icon;
        if (service.type === 'docker') return 'fa-docker';
        if (service.url || service.type === 'http') return 'fa-globe';
        return 'fa-server';
      }

      updateSummary() {
        const total = this.services.length;
        const healthy = this.services.filter(s => this.getServiceStatus(s) === 'healthy').length;
        const unhealthy = this.services.filter(s => this.getServiceStatus(s) === 'unhealthy').length;
        const critical = this.services.filter(s => s.critical && this.getServiceStatus(s) !== 'healthy').length;

        document.getElementById('totalServices').textContent = total;
        document.getElementById('healthyServices').textContent = healthy;
        document.getElementById('issueServices').textContent = unhealthy;
        document.getElementById('criticalServices').textContent = critical;
      }

      async checkService(serviceName) {
        try {
          const response = await fetch(`/api/services/check/${encodeURIComponent(serviceName)}`, {
            method: 'POST'
          });
          
          if (response.ok) {
            await this.loadServices(); // Refresh all services
            this.showSuccess(`Service ${serviceName} checked successfully`);
          } else {
            this.showError(`Failed to check service ${serviceName}`);
          }
        } catch (error) {
          console.error('Service check failed:', error);
          this.showError(`Network error checking service ${serviceName}`);
        }
      }

      formatTimestamp(timestamp) {
        if (!timestamp) return 'Never';
        
        try {
          const date = new Date(timestamp);
          return date.toLocaleTimeString();
        } catch {
          return 'Invalid';
        }
      }

      updateTimestamps() {
        document.getElementById('serverTime').textContent = new Date().toLocaleString();
      }

      updateLastRefreshed() {
        document.getElementById('lastUpdated').textContent = new Date().toLocaleTimeString();
      }

      startAutoRefresh() {
        if (this.refreshInterval) {
          clearInterval(this.refreshInterval);
        }
        
        if (this.autoRefresh) {
          this.refreshInterval = setInterval(() => {
            if (this.autoRefresh) {
              this.loadServices();
            }
          }, 30000); // 30 seconds
        }
      }

      setupEventListeners() {
        // Auto-refresh toggle
        const autoRefreshToggle = document.getElementById('autoRefreshToggle');
        autoRefreshToggle.addEventListener('change', (e) => {
          this.autoRefresh = e.target.checked;
          this.startAutoRefresh();
        });

        // Manual refresh button
        document.getElementById('refreshBtn').addEventListener('click', () => {
          this.loadServices();
        });

        // User menu functionality
        document.getElementById('userMenuButton').addEventListener('click', function(e) {
          e.stopPropagation();
          const menu = document.getElementById('userMenu');
          menu.classList.toggle('hidden');
        });
        
        document.addEventListener('click', function() {
          document.getElementById('userMenu').classList.add('hidden');
        });
        
        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', async function() {
          try {
            const response = await fetch('/api/auth/logout', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              credentials: 'same-origin'
            });

            if (response.ok) {
              window.location.href = '/login?message=Successfully logged out';
            } else {
              alert('Failed to logout. Please try again.');
            }
          } catch (error) {
            console.error('Logout error:', error);
            alert('Network error. Please try again.');
          }
        });
      }

      showError(message) {
        console.error(message);
        // Could add toast notification here
      }

      showSuccess(message) {
        console.log(message);
        // Could add toast notification here
      }
    }

    // Initialize service monitor
    let serviceMonitor;
    document.addEventListener('DOMContentLoaded', function() {
      serviceMonitor = new ServiceMonitor();
    });
  </script>
</body>
</html>
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>üîç Services Monitor</h1>
      <p>Real-time monitoring of Docker containers and remote services</p>
    </div>
    
    <div class="content">
      <!-- Navigation & Controls -->
      <div class="controls">
        <a href="/dashboard" class="btn btn-secondary">‚Üê Back to Dashboard</a>
        <button onclick="refreshServices()" class="btn btn-primary" id="refreshBtn">
          üîÑ Refresh Status
        </button>
        <button onclick="toggleMonitoring()" class="btn btn-warning" id="toggleBtn">
          ‚è∏Ô∏è Pause Monitoring
        </button>
        <button onclick="showConfig()" class="btn btn-info">
          ‚öôÔ∏è Configure Services
        </button>
        <div class="last-update" id="lastUpdate">
          Last updated: -
        </div>
      </div>

      <!-- Summary Cards -->
      <div class="summary-cards">
        <div class="summary-card">
          <div class="summary-value text-info" id="totalServices">-</div>
          <div>Total Services</div>
        </div>
        <div class="summary-card">
          <div class="summary-value text-success" id="healthyServices">-</div>
          <div>Healthy</div>
        </div>
        <div class="summary-card">
          <div class="summary-value text-danger" id="unhealthyServices">-</div>
          <div>Unhealthy</div>
        </div>
        <div class="summary-card">
          <div class="summary-value text-warning" id="criticalDown">-</div>
          <div>Critical Down</div>
        </div>
      </div>

      <!-- Local Services -->
      <div class="chart-container">
        <h3>üê≥ Local Docker Services</h3>
        <div id="localServices" class="service-grid">
          <!-- Services will be loaded here -->
        </div>
      </div>

      <!-- Remote Services -->
      <div class="chart-container">
        <h3>üåê Remote Services</h3>
        <div id="remoteServices" class="service-grid">
          <!-- Services will be loaded here -->
        </div>
      </div>

      <!-- Alerts History -->
      <div class="chart-container">
        <h3>üö® Recent Alerts</h3>
        <div id="alertsHistory">
          <div class="alert alert-info">
            üìù No recent alerts. All services are running smoothly.
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Configuration Modal -->
  <div id="configModal" class="modal">
    <div class="modal-content" style="max-width: 90vw; width: auto; min-width: 500px; max-height: 90vh;">
      <h2>‚öôÔ∏è Services Configuration</h2>
      <p class="text-muted mb-3">Configure which services to monitor</p>
      
      <div class="form-group" style="flex: 1; overflow: hidden;">
        <label>Configuration JSON:</label>
        <textarea id="configJson" class="form-control" rows="20" style="font-family: monospace; font-size: 0.9rem; height: 60vh; resize: vertical;"></textarea>
      </div>
      
      <div class="buttons">
        <button type="button" onclick="closeConfigModal()" class="btn btn-secondary">
          Cancel
        </button>
        <button type="button" onclick="saveConfig()" class="btn btn-primary">
          üíæ Save Configuration
        </button>
      </div>
    </div>
  </div>

  <!-- Global Loading Overlay -->
  <div id="spinner" class="spinner-overlay hidden">
    <div class="spinner-content">
      <div class="spinner"></div>
      <p class="spinner-text">üîç Checking services...</p>
    </div>
  </div>

  <script src="/static/js/services-monitor.js"></script>
</body>
</html>
