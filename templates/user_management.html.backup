<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>👥 User Management - Trigger Deploy Server</title>
  <link rel="icon" type="image/svg+xml" href="/static/images/favicon.svg">
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  
  <script>
    tailwind.config = {
      theme: {
        extend: {
          animation: {
            'pulse': 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
          }
        }
      }
    }
  </script>
</head>
<body class="bg-gray-50 min-h-screen">
  <!-- Navigation -->
  <nav class="bg-white border-b border-gray-200 sticky top-0 z-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between h-16">
        <!-- Logo and Navigation -->
        <div class="flex items-center">
          <div class="flex-shrink-0 flex items-center">
            <div class="w-8 h-8 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-lg flex items-center justify-center text-white mr-3">
              <i class="fas fa-rocket"></i>
            </div>
            <span class="text-xl font-bold text-gray-900">Trigger Deploy</span>
          </div>
          
          <!-- Navigation Links -->
          <div class="hidden md:ml-8 md:flex md:space-x-8">
            <a href="/dashboard" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 border-b-2 px-1 pt-1 text-sm font-medium transition duration-200">
              <i class="fas fa-home mr-1"></i>Dashboard
            </a>
            <a href="/deploy-servers" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 border-b-2 px-1 pt-1 text-sm font-medium transition duration-200">
              <i class="fas fa-cloud-upload-alt mr-1"></i>Deploy
            </a>
            <a href="/services-monitor" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 border-b-2 px-1 pt-1 text-sm font-medium transition duration-200">
              <i class="fas fa-chart-line mr-1"></i>Monitor
            </a>
            <a href="/metrics" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 border-b-2 px-1 pt-1 text-sm font-medium transition duration-200">
              <i class="fas fa-analytics mr-1"></i>Metrics
            </a>
            <a href="/users" class="border-blue-500 text-blue-600 border-b-2 px-1 pt-1 text-sm font-medium">
              <i class="fas fa-users mr-1"></i>Users
            </a>
          </div>
        </div>
        
        <!-- Right side -->
        <div class="flex items-center space-x-4">
          <button id="addUserBtn" onclick="showCreateUserModal()" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition duration-200">
            <i class="fas fa-plus mr-1"></i>Add User
          </button>
          
          <button id="refreshBtn" onclick="refreshUserList()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition duration-200">
            <i class="fas fa-sync-alt mr-1"></i>Refresh
          </button>
          
          <!-- User Menu -->
          <div class="relative">
            <button id="userMenuButton" class="flex items-center space-x-2 text-gray-700 hover:text-gray-900 p-2 rounded-lg hover:bg-gray-100 transition duration-200">
              <i class="fas fa-user-circle text-lg"></i>
              <i class="fas fa-chevron-down text-xs"></i>
            </button>
            
            <!-- Dropdown Menu -->
            <div id="userMenu" class="hidden absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-1">
              <a href="/users" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                <i class="fas fa-user mr-2"></i>Profile
              </a>
              <hr class="my-1">
              <button id="logoutBtn" class="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50">
                <i class="fas fa-sign-out-alt mr-2"></i>Logout
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <div class="max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
    <!-- Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900 flex items-center">
        <i class="fas fa-users mr-3 text-blue-500"></i>
        User Management
      </h1>
      <p class="text-gray-600 mt-2">Manage system users, roles, and permissions</p>
    </div>

    <!-- Status Messages -->
    <div id="status" class="hidden mb-6">
      <!-- Status messages will be shown here -->
    </div>

    <!-- User Statistics -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
      <!-- Total Users -->
      <div class="bg-white rounded-xl p-6 border-l-4 border-blue-500 shadow-sm hover:shadow-md transition duration-200">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-gray-600">Total Users</p>
            <p class="text-3xl font-bold text-gray-900" id="totalUsers">-</p>
          </div>
          <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
            <i class="fas fa-users text-blue-600 text-xl"></i>
          </div>
        </div>
      </div>

      <!-- Super Admins -->
      <div class="bg-white rounded-xl p-6 border-l-4 border-purple-500 shadow-sm hover:shadow-md transition duration-200">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-gray-600">Super Admins</p>
            <p class="text-3xl font-bold text-gray-900" id="superAdmins">-</p>
          </div>
          <div class="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
            <i class="fas fa-crown text-purple-600 text-xl"></i>
          </div>
        </div>
      </div>

      <!-- Regular Users -->
      <div class="bg-white rounded-xl p-6 border-l-4 border-green-500 shadow-sm hover:shadow-md transition duration-200">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-gray-600">Regular Users</p>
            <p class="text-3xl font-bold text-gray-900" id="regularUsers">-</p>
          </div>
          <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
            <i class="fas fa-user text-green-600 text-xl"></i>
          </div>
        </div>
      </div>

      <!-- Active Users -->
      <div class="bg-white rounded-xl p-6 border-l-4 border-emerald-500 shadow-sm hover:shadow-md transition duration-200">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-gray-600">Active Users</p>
            <p class="text-3xl font-bold text-gray-900" id="activeUsers">-</p>
          </div>
          <div class="w-12 h-12 bg-emerald-100 rounded-lg flex items-center justify-center">
            <i class="fas fa-check-circle text-emerald-600 text-xl"></i>
          </div>
        </div>
      </div>
    </div>

    <!-- User List -->
    <div class="bg-white rounded-xl shadow-sm overflow-hidden">
      <div class="px-6 py-4 border-b border-gray-200">
        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
          <div>
            <h2 class="text-lg font-semibold text-gray-900">User List</h2>
            <p class="text-sm text-gray-600 mt-1">Manage and monitor all system users</p>
          </div>
          <div class="mt-4 sm:mt-0">
            <div class="relative">
              <input 
                type="text" 
                id="userSearch" 
                placeholder="Search users..." 
                onkeyup="filterUsers()"
                class="w-full sm:w-64 px-4 py-2 pl-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              <i class="fas fa-search absolute left-3 top-3 text-gray-400"></i>
            </div>
          </div>
        </div>
      </div>
      
      <!-- User Table -->
      <div class="overflow-x-auto">
        <table class="w-full">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Login</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200" id="userTableBody">
            <!-- Loading State -->
            <tr>
              <td colspan="6" class="px-6 py-12 text-center">
                <div class="flex justify-center items-center">
                  <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mr-3"></div>
                  <span class="text-gray-600">Loading users...</span>
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Create User Modal -->
  <div id="createUserModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50 p-4">
    <div class="bg-white rounded-xl max-w-md w-full p-6 transform transition-all">
      <div class="text-center mb-6">
        <div class="w-12 h-12 bg-gradient-to-r from-green-500 to-emerald-600 rounded-full flex items-center justify-center text-white mx-auto mb-4">
          <i class="fas fa-user-plus text-xl"></i>
        </div>
        <h2 class="text-xl font-bold text-gray-900">Create New User</h2>
        <p class="text-gray-600 mt-2">Add a new user to the system</p>
      </div>
      
      <form id="createUserForm">
        <div class="space-y-4">
          <div>
            <label for="newUsername" class="block text-sm font-medium text-gray-700 mb-1">Username</label>
            <input 
              type="text" 
              id="newUsername" 
              name="username"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Enter username"
            />
          </div>
          
          <div>
            <label for="newPassword" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
            <input 
              type="password" 
              id="newPassword" 
              name="password"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Enter password"
            />
          </div>
          
          <div>
            <label for="newRole" class="block text-sm font-medium text-gray-700 mb-1">Role</label>
            <select 
              id="newRole" 
              name="role"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="user">User</option>
              <option value="admin">Admin</option>
              <option value="super_admin">Super Admin</option>
            </select>
          </div>
          
          <div>
            <label for="newEmail" class="block text-sm font-medium text-gray-700 mb-1">Email (Optional)</label>
            <input 
              type="email" 
              id="newEmail" 
              name="email"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Enter email address"
            />
          </div>
        </div>
        
        <div class="flex space-x-3 mt-6">
          <button 
            type="button" 
            onclick="hideCreateUserModal()" 
            class="flex-1 bg-gray-100 text-gray-700 px-4 py-2 rounded-lg font-medium hover:bg-gray-200 transition duration-200"
          >
            Cancel
          </button>
          <button 
            type="submit" 
            class="flex-1 bg-gradient-to-r from-green-500 to-emerald-600 text-white px-4 py-2 rounded-lg font-medium hover:from-green-600 hover:to-emerald-700 transition duration-200"
          >
            <i class="fas fa-plus mr-1"></i>Create User
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Edit User Modal -->
  <div id="editUserModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50 p-4">
    <div class="bg-white rounded-xl max-w-md w-full p-6 transform transition-all">
      <div class="text-center mb-6">
        <div class="w-12 h-12 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-full flex items-center justify-center text-white mx-auto mb-4">
          <i class="fas fa-user-edit text-xl"></i>
        </div>
        <h2 class="text-xl font-bold text-gray-900">Edit User</h2>
        <p class="text-gray-600 mt-2">Update user information</p>
      </div>
      
      <form id="editUserForm">
        <input type="hidden" id="editUserId" name="user_id" />
        
        <div class="space-y-4">
          <div>
            <label for="editUsername" class="block text-sm font-medium text-gray-700 mb-1">Username</label>
            <input 
              type="text" 
              id="editUsername" 
              name="username"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          
          <div>
            <label for="editRole" class="block text-sm font-medium text-gray-700 mb-1">Role</label>
            <select 
              id="editRole" 
              name="role"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="user">User</option>
              <option value="admin">Admin</option>
              <option value="super_admin">Super Admin</option>
            </select>
          </div>
          
          <div>
            <label for="editEmail" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
            <input 
              type="email" 
              id="editEmail" 
              name="email"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          
          <div>
            <label class="flex items-center">
              <input type="checkbox" id="editIsActive" name="is_active" class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
              <span class="ml-2 text-sm text-gray-600">Active User</span>
            </label>
          </div>
        </div>
        
        <div class="flex space-x-3 mt-6">
          <button 
            type="button" 
            onclick="hideEditUserModal()" 
            class="flex-1 bg-gray-100 text-gray-700 px-4 py-2 rounded-lg font-medium hover:bg-gray-200 transition duration-200"
          >
            Cancel
          </button>
          <button 
            type="submit" 
            class="flex-1 bg-gradient-to-r from-blue-500 to-indigo-600 text-white px-4 py-2 rounded-lg font-medium hover:from-blue-600 hover:to-indigo-700 transition duration-200"
          >
            <i class="fas fa-save mr-1"></i>Update User
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="deleteUserModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50 p-4">
    <div class="bg-white rounded-xl max-w-md w-full p-6 transform transition-all">
      <div class="text-center mb-6">
        <div class="w-12 h-12 bg-gradient-to-r from-red-500 to-red-600 rounded-full flex items-center justify-center text-white mx-auto mb-4">
          <i class="fas fa-exclamation-triangle text-xl"></i>
        </div>
        <h2 class="text-xl font-bold text-gray-900">Delete User</h2>
        <p class="text-gray-600 mt-2">Are you sure you want to delete this user? This action cannot be undone.</p>
      </div>
      
      <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
        <p class="text-sm text-red-700">
          <i class="fas fa-exclamation-triangle mr-2"></i>
          <strong>Warning:</strong> This will permanently delete the user <span id="deleteUsername" class="font-semibold"></span> and all associated data.
        </p>
      </div>
      
      <div class="flex space-x-3">
        <button 
          type="button" 
          onclick="hideDeleteUserModal()" 
          class="flex-1 bg-gray-100 text-gray-700 px-4 py-2 rounded-lg font-medium hover:bg-gray-200 transition duration-200"
        >
          Cancel
        </button>
        <button 
          type="button" 
          onclick="confirmDeleteUser()" 
          class="flex-1 bg-gradient-to-r from-red-500 to-red-600 text-white px-4 py-2 rounded-lg font-medium hover:from-red-600 hover:to-red-700 transition duration-200"
        >
          <i class="fas fa-trash mr-1"></i>Delete User
        </button>
      </div>
    </div>
  </div>

  <!-- Footer -->
  <footer class="bg-white border-t border-gray-200 mt-12">
    <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
      <div class="flex flex-col sm:flex-row justify-between items-center">
        <div class="flex items-center mb-4 sm:mb-0">
          <div class="w-6 h-6 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-lg flex items-center justify-center text-white mr-2">
            <i class="fas fa-rocket text-xs"></i>
          </div>
          <div>
            <h3 class="text-sm font-semibold text-gray-900">Trigger Deploy Server</h3>
            <p class="text-xs text-gray-600">User management and access control</p>
          </div>
        </div>
        <div class="text-sm text-gray-500">
          <i class="fas fa-clock mr-1"></i>
          Last updated: <span id="lastUpdated">--:--:--</span>
        </div>
      </div>
    </div>
  </footer>

  <script>
    // Global variables
    let users = [];
    let selectedUserId = null;

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
      loadUsers();
      setupEventListeners();
      updateTimestamp();
      setInterval(updateTimestamp, 1000);
    });

    // Setup event listeners
    function setupEventListeners() {
      // User menu functionality
      document.getElementById('userMenuButton').addEventListener('click', function(e) {
        e.stopPropagation();
        const menu = document.getElementById('userMenu');
        menu.classList.toggle('hidden');
      });
      
      document.addEventListener('click', function() {
        document.getElementById('userMenu').classList.add('hidden');
      });
      
      // Logout functionality
      document.getElementById('logoutBtn').addEventListener('click', logout);
      
      // Form submissions
      document.getElementById('createUserForm').addEventListener('submit', handleCreateUser);
      document.getElementById('editUserForm').addEventListener('submit', handleEditUser);
    }

    // Load users from API
    async function loadUsers() {
      try {
        const response = await fetch('/api/users');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        users = data.users || [];
        renderUsers();
        updateUserStats();
      } catch (error) {
        console.error('Failed to load users:', error);
        showError('Failed to load users. Please try again.');
      }
    }

    // Render users in table
    function renderUsers() {
      const tbody = document.getElementById('userTableBody');
      
      if (users.length === 0) {
        tbody.innerHTML = `
          <tr>
            <td colspan="6" class="px-6 py-12 text-center">
              <div class="text-gray-500">
                <i class="fas fa-users text-4xl mb-4"></i>
                <p class="text-lg font-medium">No users found</p>
                <p class="text-sm">Create your first user to get started</p>
              </div>
            </td>
          </tr>
        `;
        return;
      }

      tbody.innerHTML = users.map(user => renderUserRow(user)).join('');
    }

    // Render individual user row
    function renderUserRow(user) {
      const roleColor = {
        'super_admin': 'bg-purple-100 text-purple-700',
        'admin': 'bg-blue-100 text-blue-700',
        'user': 'bg-gray-100 text-gray-700'
      }[user.role] || 'bg-gray-100 text-gray-700';

      const statusColor = user.is_active ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700';
      const statusText = user.is_active ? 'Active' : 'Inactive';
      const statusIcon = user.is_active ? 'fa-check-circle' : 'fa-times-circle';

      return `
        <tr class="hover:bg-gray-50">
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="flex items-center">
              <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-full flex items-center justify-center text-white mr-3">
                <i class="fas fa-user"></i>
              </div>
              <div>
                <div class="text-sm font-medium text-gray-900">${user.username}</div>
                <div class="text-sm text-gray-500">${user.email || 'No email'}</div>
              </div>
            </div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="px-2 py-1 text-xs font-semibold rounded-full ${roleColor}">
              ${user.role.replace('_', ' ').toUpperCase()}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="px-2 py-1 text-xs font-semibold rounded-full ${statusColor}">
              <i class="fas ${statusIcon} mr-1"></i>${statusText}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
            ${user.last_login || 'Never'}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
            ${user.created_at || 'Unknown'}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm space-x-2">
            <button onclick="showEditUserModal(${user.id})" class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded text-xs transition duration-200">
              <i class="fas fa-edit mr-1"></i>Edit
            </button>
            <button onclick="showDeleteUserModal(${user.id})" class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-xs transition duration-200">
              <i class="fas fa-trash mr-1"></i>Delete
            </button>
          </td>
        </tr>
      `;
    }

    // Update user statistics
    function updateUserStats() {
      const total = users.length;
      const superAdmins = users.filter(u => u.role === 'super_admin').length;
      const regularUsers = users.filter(u => u.role === 'user').length;
      const active = users.filter(u => u.is_active).length;

      document.getElementById('totalUsers').textContent = total;
      document.getElementById('superAdmins').textContent = superAdmins;
      document.getElementById('regularUsers').textContent = regularUsers;
      document.getElementById('activeUsers').textContent = active;
    }

    // Filter users based on search
    function filterUsers() {
      const search = document.getElementById('userSearch').value.toLowerCase();
      const filteredUsers = users.filter(user => 
        user.username.toLowerCase().includes(search) ||
        (user.email && user.email.toLowerCase().includes(search)) ||
        user.role.toLowerCase().includes(search)
      );
      
      const tbody = document.getElementById('userTableBody');
      tbody.innerHTML = filteredUsers.map(user => renderUserRow(user)).join('');
    }

    // Modal functions
    function showCreateUserModal() {
      document.getElementById('createUserModal').classList.remove('hidden');
      document.getElementById('createUserModal').classList.add('flex');
    }

    function hideCreateUserModal() {
      document.getElementById('createUserModal').classList.add('hidden');
      document.getElementById('createUserModal').classList.remove('flex');
      document.getElementById('createUserForm').reset();
    }

    function showEditUserModal(userId) {
      const user = users.find(u => u.id === userId);
      if (!user) return;

      selectedUserId = userId;
      document.getElementById('editUserId').value = userId;
      document.getElementById('editUsername').value = user.username;
      document.getElementById('editRole').value = user.role;
      document.getElementById('editEmail').value = user.email || '';
      document.getElementById('editIsActive').checked = user.is_active;

      document.getElementById('editUserModal').classList.remove('hidden');
      document.getElementById('editUserModal').classList.add('flex');
    }

    function hideEditUserModal() {
      document.getElementById('editUserModal').classList.add('hidden');
      document.getElementById('editUserModal').classList.remove('flex');
      document.getElementById('editUserForm').reset();
      selectedUserId = null;
    }

    function showDeleteUserModal(userId) {
      const user = users.find(u => u.id === userId);
      if (!user) return;

      selectedUserId = userId;
      document.getElementById('deleteUsername').textContent = user.username;
      document.getElementById('deleteUserModal').classList.remove('hidden');
      document.getElementById('deleteUserModal').classList.add('flex');
    }

    function hideDeleteUserModal() {
      document.getElementById('deleteUserModal').classList.add('hidden');
      document.getElementById('deleteUserModal').classList.remove('flex');
      selectedUserId = null;
    }

    // User management functions
    async function handleCreateUser(e) {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const userData = Object.fromEntries(formData.entries());

      try {
        const response = await fetch('/api/users', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(userData)
        });

        const result = await response.json();

        if (response.ok) {
          showSuccess('User created successfully!');
          hideCreateUserModal();
          loadUsers();
        } else {
          showError(result.error || 'Failed to create user');
        }
      } catch (error) {
        console.error('Create user error:', error);
        showError('Network error. Please try again.');
      }
    }

    async function handleEditUser(e) {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const userData = Object.fromEntries(formData.entries());
      userData.is_active = document.getElementById('editIsActive').checked;

      try {
        const response = await fetch(`/api/users/${selectedUserId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(userData)
        });

        const result = await response.json();

        if (response.ok) {
          showSuccess('User updated successfully!');
          hideEditUserModal();
          loadUsers();
        } else {
          showError(result.error || 'Failed to update user');
        }
      } catch (error) {
        console.error('Update user error:', error);
        showError('Network error. Please try again.');
      }
    }

    async function confirmDeleteUser() {
      try {
        const response = await fetch(`/api/users/${selectedUserId}`, {
          method: 'DELETE'
        });

        const result = await response.json();

        if (response.ok) {
          showSuccess('User deleted successfully!');
          hideDeleteUserModal();
          loadUsers();
        } else {
          showError(result.error || 'Failed to delete user');
        }
      } catch (error) {
        console.error('Delete user error:', error);
        showError('Network error. Please try again.');
      }
    }

    // Utility functions
    function refreshUserList() {
      loadUsers();
    }

    async function logout() {
      try {
        const response = await fetch('/api/auth/logout', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'same-origin'
        });

        if (response.ok) {
          window.location.href = '/login?message=Successfully logged out';
        } else {
          alert('Failed to logout. Please try again.');
        }
      } catch (error) {
        console.error('Logout error:', error);
        alert('Network error. Please try again.');
      }
    }

    function updateTimestamp() {
      document.getElementById('lastUpdated').textContent = new Date().toLocaleTimeString();
    }

    function showStatus(message, type = 'info') {
      const statusEl = document.getElementById('status');
      const bgColor = type === 'error' ? 'bg-red-100 border-red-400 text-red-700' : 
                     type === 'success' ? 'bg-green-100 border-green-400 text-green-700' : 
                     'bg-blue-100 border-blue-400 text-blue-700';
      
      const icon = type === 'error' ? 'fa-times-circle' : 
                  type === 'success' ? 'fa-check-circle' : 
                  'fa-info-circle';

      statusEl.innerHTML = `
        <div class="${bgColor} border rounded-lg p-4 flex items-center">
          <i class="fas ${icon} mr-3"></i>
          ${message}
        </div>
      `;
      statusEl.classList.remove('hidden');
      
      // Auto-hide after 5 seconds
      setTimeout(() => {
        statusEl.classList.add('hidden');
      }, 5000);
    }

    function showError(message) {
      showStatus(message, 'error');
    }

    function showSuccess(message) {
      showStatus(message, 'success');
    }
  </script>
</body>
</html>
      
      <div class="users-table-container">
        <table class="users-table" id="usersTable">
          <thead>
            <tr>
              <th>User</th>
              <th>Role</th>
              <th>Email</th>
              <th>Last Login</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="usersTableBody">
            <!-- Users will be loaded here -->
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Create/Edit User Modal -->
  <div id="userModal" class="modal hidden">
    <div class="modal-content modal-large">
      <div class="modal-header">
        <h3 id="modalTitle">👤 Add New User</h3>
        <button type="button" class="modal-close" onclick="closeUserModal()">✖️</button>
      </div>
      <div class="modal-body">
        <form id="userForm" class="user-form">
          <input type="hidden" id="userId" name="userId">
          
          <div class="form-row">
            <div class="form-group">
              <label for="fullName">👤 Full Name *</label>
              <input type="text" id="fullName" name="fullName" class="form-control" required>
            </div>
            <div class="form-group">
              <label for="username">🔑 Username *</label>
              <input type="text" id="username" name="username" class="form-control" required>
            </div>
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label for="email">📧 Email *</label>
              <input type="email" id="email" name="email" class="form-control" required>
            </div>
            <div class="form-group">
              <label for="role">👑 Role *</label>
              <select id="role" name="role" class="form-control" required>
                <option value="user">👤 User</option>
                <option value="superadmin">👑 Super Admin</option>
              </select>
            </div>
          </div>
          
          <div class="form-row" id="passwordSection">
            <div class="form-group">
              <label for="password">🔐 Password *</label>
              <div class="password-input-wrapper">
                <input type="password" id="password" name="password" class="form-control">
                <button type="button" class="password-toggle" onclick="togglePasswordVisibility('password')">👁️</button>
              </div>
            </div>
            <div class="form-group">
              <label for="confirmPassword">🔐 Confirm Password *</label>
              <div class="password-input-wrapper">
                <input type="password" id="confirmPassword" name="confirmPassword" class="form-control">
                <button type="button" class="password-toggle" onclick="togglePasswordVisibility('confirmPassword')">👁️</button>
              </div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" onclick="closeUserModal()" class="btn btn-secondary">Cancel</button>
        <button type="button" onclick="saveUser()" class="btn btn-primary" id="saveUserBtn">💾 Save User</button>
      </div>
    </div>
  </div>

  <!-- Change Password Modal -->
  <div id="passwordModal" class="modal hidden">
    <div class="modal-content">
      <div class="modal-header">
        <h3>🔐 Change Password</h3>
        <button type="button" class="modal-close" onclick="closePasswordModal()">✖️</button>
      </div>
      <div class="modal-body">
        <form id="passwordForm" class="password-form">
          <input type="hidden" id="passwordUserId" name="passwordUserId">
          
          <div class="form-group" id="currentPasswordGroup">
            <label for="currentPassword">🔑 Current Password *</label>
            <div class="password-input-wrapper">
              <input type="password" id="currentPassword" name="currentPassword" class="form-control" required>
              <button type="button" class="password-toggle" onclick="togglePasswordVisibility('currentPassword')">👁️</button>
            </div>
          </div>
          
          <div class="form-group">
            <label for="newPassword">🔐 New Password *</label>
            <div class="password-input-wrapper">
              <input type="password" id="newPassword" name="newPassword" class="form-control" required>
              <button type="button" class="password-toggle" onclick="togglePasswordVisibility('newPassword')">👁️</button>
            </div>
          </div>
          
          <div class="form-group">
            <label for="confirmNewPassword">🔐 Confirm New Password *</label>
            <div class="password-input-wrapper">
              <input type="password" id="confirmNewPassword" name="confirmNewPassword" class="form-control" required>
              <button type="button" class="password-toggle" onclick="togglePasswordVisibility('confirmNewPassword')">👁️</button>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" onclick="closePasswordModal()" class="btn btn-secondary">Cancel</button>
        <button type="button" onclick="changePassword()" class="btn btn-primary">🔐 Change Password</button>
      </div>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="deleteModal" class="modal hidden">
    <div class="modal-content">
      <div class="modal-header">
        <h3>🗑️ Delete User</h3>
        <button type="button" class="modal-close" onclick="closeDeleteModal()">✖️</button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this user?</p>
        <div class="user-delete-info">
          <strong id="deleteUserName"></strong><br>
          <span id="deleteUserEmail"></span>
        </div>
        <p class="warning-text">⚠️ This action cannot be undone.</p>
        <input type="hidden" id="deleteUserId">
      </div>
      <div class="modal-footer">
        <button type="button" onclick="closeDeleteModal()" class="btn btn-secondary">Cancel</button>
        <button type="button" onclick="confirmDeleteUser()" class="btn btn-danger">🗑️ Delete User</button>
      </div>
    </div>
  </div>

  <script src="/static/js/dashboard.js"></script>
  <script src="/static/js/user-management.js"></script>
</body>
</html>
